generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  password     String
  image        String?
  location     String?
  bio          String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follows[]    @relation("following")
  following    Follows[]    @relation("follower")
  messages     Message[]    @relation("UserMessages")
  receivedMsgs Message[]    @relation("ReceivedMessages")
  devotionals  Devotional[]
  testimonies  Testimony[]
  quizScores   QuizScore[]
  Meeting      Meeting[]
}

model Post {
  id        String    @id @default(cuid())
  content   String
  mediaUrl  String?
  mediaType String? // image, video
  category  String // prayer, worship, testimony, etc.
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  sender     User     @relation("UserMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}

model Devotional {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Testimony {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Quiz {
  id        String      @id @default(cuid())
  question  String
  options   String[]
  answer    String
  category  String
  scores    QuizScore[]
  createdAt DateTime    @default(now())
}

model QuizScore {
  id        String   @id @default(cuid())
  score     Int
  userId    String
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now())
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  date        DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  token       String
}
